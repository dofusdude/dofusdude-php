<?php
/**
 * QuestItemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * dofusdude
 *
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - 🥷 **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ⚡ **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in 🇩🇪.  - 📨 **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - 🩸 **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - 🗣️ **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - 🧠 **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - 🕵️ **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h).
 *
 * The version of the OpenAPI document: 1.0.0-rc.8
 * Contact: stelzo@steado.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * QuestItemsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QuestItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAllItemsQuestList' => [
            'application/json',
        ],
        'getItemQuestSingle' => [
            'application/json',
        ],
        'getItemsQuestList' => [
            'application/json',
        ],
        'getItemsQuestSearch' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllItemsQuestList
     *
     * List All Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsQuestList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListItems|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function getAllItemsQuestList($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getAllItemsQuestList'][0])
    {
        list($response) = $this->getAllItemsQuestListWithHttpInfo($language, $game, $sort_level, $filter_min_level, $filter_max_level, $accept_encoding, $filter_type_name_id, $contentType);
        return $response;
    }

    /**
     * Operation getAllItemsQuestListWithHttpInfo
     *
     * List All Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsQuestList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListItems|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllItemsQuestListWithHttpInfo($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getAllItemsQuestList'][0])
    {
        $request = $this->getAllItemsQuestListRequest($language, $game, $sort_level, $filter_min_level, $filter_max_level, $accept_encoding, $filter_type_name_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListItems' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListItems' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListItems', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListItems';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllItemsQuestListAsync
     *
     * List All Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsQuestList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllItemsQuestListAsync($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getAllItemsQuestList'][0])
    {
        return $this->getAllItemsQuestListAsyncWithHttpInfo($language, $game, $sort_level, $filter_min_level, $filter_max_level, $accept_encoding, $filter_type_name_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllItemsQuestListAsyncWithHttpInfo
     *
     * List All Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsQuestList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllItemsQuestListAsyncWithHttpInfo($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getAllItemsQuestList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListItems';
        $request = $this->getAllItemsQuestListRequest($language, $game, $sort_level, $filter_min_level, $filter_max_level, $accept_encoding, $filter_type_name_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllItemsQuestList'
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsQuestList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllItemsQuestListRequest($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getAllItemsQuestList'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getAllItemsQuestList'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getAllItemsQuestList, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getAllItemsQuestList, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getAllItemsQuestList'
            );
        }


        if ($filter_min_level !== null && $filter_min_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling QuestItemsApi.getAllItemsQuestList, must be smaller than or equal to 200.');
        }
        if ($filter_min_level !== null && $filter_min_level < 0) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling QuestItemsApi.getAllItemsQuestList, must be bigger than or equal to 0.');
        }
        
        if ($filter_max_level !== null && $filter_max_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling QuestItemsApi.getAllItemsQuestList, must be smaller than or equal to 200.');
        }
        if ($filter_max_level !== null && $filter_max_level < 0) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling QuestItemsApi.getAllItemsQuestList, must be bigger than or equal to 0.');
        }
        

        

        $resourcePath = '/{game}/v1/{language}/items/quest/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_level,
            'sort[level]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_min_level,
            'filter[min_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_max_level,
            'filter[max_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_name_id,
            'filter[type.name_id]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemQuestSingle
     *
     * Single Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemQuestSingle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Resource|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function getItemQuestSingle($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemQuestSingle'][0])
    {
        list($response) = $this->getItemQuestSingleWithHttpInfo($language, $ankama_id, $game, $contentType);
        return $response;
    }

    /**
     * Operation getItemQuestSingleWithHttpInfo
     *
     * Single Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemQuestSingle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Resource|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemQuestSingleWithHttpInfo($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemQuestSingle'][0])
    {
        $request = $this->getItemQuestSingleRequest($language, $ankama_id, $game, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Resource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Resource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Resource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Resource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Resource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemQuestSingleAsync
     *
     * Single Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemQuestSingle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemQuestSingleAsync($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemQuestSingle'][0])
    {
        return $this->getItemQuestSingleAsyncWithHttpInfo($language, $ankama_id, $game, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemQuestSingleAsyncWithHttpInfo
     *
     * Single Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemQuestSingle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemQuestSingleAsyncWithHttpInfo($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemQuestSingle'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Resource';
        $request = $this->getItemQuestSingleRequest($language, $ankama_id, $game, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemQuestSingle'
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemQuestSingle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemQuestSingleRequest($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemQuestSingle'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getItemQuestSingle'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getItemQuestSingle, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getItemQuestSingle, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'ankama_id' is set
        if ($ankama_id === null || (is_array($ankama_id) && count($ankama_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ankama_id when calling getItemQuestSingle'
            );
        }

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getItemQuestSingle'
            );
        }


        $resourcePath = '/{game}/v1/{language}/items/quest/{ankama_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($ankama_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ankama_id' . '}',
                ObjectSerializer::toPathValue($ankama_id),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsQuestList
     *
     * List Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListItems|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function getItemsQuestList($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestList'][0])
    {
        list($response) = $this->getItemsQuestListWithHttpInfo($language, $game, $sort_level, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $filter_type_name_id, $contentType);
        return $response;
    }

    /**
     * Operation getItemsQuestListWithHttpInfo
     *
     * List Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListItems|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsQuestListWithHttpInfo($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestList'][0])
    {
        $request = $this->getItemsQuestListRequest($language, $game, $sort_level, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $filter_type_name_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListItems' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListItems' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListItems', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListItems';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsQuestListAsync
     *
     * List Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsQuestListAsync($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestList'][0])
    {
        return $this->getItemsQuestListAsyncWithHttpInfo($language, $game, $sort_level, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $filter_type_name_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsQuestListAsyncWithHttpInfo
     *
     * List Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsQuestListAsyncWithHttpInfo($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListItems';
        $request = $this->getItemsQuestListRequest($language, $game, $sort_level, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $filter_type_name_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsQuestList'
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsQuestListRequest($language, $game, $sort_level = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestList'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getItemsQuestList'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getItemsQuestList, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getItemsQuestList, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getItemsQuestList'
            );
        }


        if ($filter_min_level !== null && $filter_min_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling QuestItemsApi.getItemsQuestList, must be smaller than or equal to 200.');
        }
        if ($filter_min_level !== null && $filter_min_level < 0) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling QuestItemsApi.getItemsQuestList, must be bigger than or equal to 0.');
        }
        
        if ($filter_max_level !== null && $filter_max_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling QuestItemsApi.getItemsQuestList, must be smaller than or equal to 200.');
        }
        if ($filter_max_level !== null && $filter_max_level < 0) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling QuestItemsApi.getItemsQuestList, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size < -1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling QuestItemsApi.getItemsQuestList, must be bigger than or equal to -1.');
        }
        
        if ($page_number !== null && $page_number < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_number" when calling QuestItemsApi.getItemsQuestList, must be bigger than or equal to 0.');
        }
        
        
        

        $resourcePath = '/{game}/v1/{language}/items/quest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_level,
            'sort[level]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_min_level,
            'filter[min_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_max_level,
            'filter[max_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page[size]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'page[number]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_item,
            'fields[item]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_name_id,
            'filter[type.name_id]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsQuestSearch
     *
     * Search Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $query case sensitive search query (required)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListItem[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function getItemsQuestSearch($language, $game, $query, $filter_min_level = null, $filter_max_level = null, $limit = 8, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestSearch'][0])
    {
        list($response) = $this->getItemsQuestSearchWithHttpInfo($language, $game, $query, $filter_min_level, $filter_max_level, $limit, $filter_type_name_id, $contentType);
        return $response;
    }

    /**
     * Operation getItemsQuestSearchWithHttpInfo
     *
     * Search Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $query case sensitive search query (required)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListItem[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsQuestSearchWithHttpInfo($language, $game, $query, $filter_min_level = null, $filter_max_level = null, $limit = 8, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestSearch'][0])
    {
        $request = $this->getItemsQuestSearchRequest($language, $game, $query, $filter_min_level, $filter_max_level, $limit, $filter_type_name_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsQuestSearchAsync
     *
     * Search Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $query case sensitive search query (required)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsQuestSearchAsync($language, $game, $query, $filter_min_level = null, $filter_max_level = null, $limit = 8, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestSearch'][0])
    {
        return $this->getItemsQuestSearchAsyncWithHttpInfo($language, $game, $query, $filter_min_level, $filter_max_level, $limit, $filter_type_name_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsQuestSearchAsyncWithHttpInfo
     *
     * Search Quest Items
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $query case sensitive search query (required)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsQuestSearchAsyncWithHttpInfo($language, $game, $query, $filter_min_level = null, $filter_max_level = null, $limit = 8, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListItem[]';
        $request = $this->getItemsQuestSearchRequest($language, $game, $query, $filter_min_level, $filter_max_level, $limit, $filter_type_name_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsQuestSearch'
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param  string $query case sensitive search query (required)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string[] $filter_type_name_id multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsQuestSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsQuestSearchRequest($language, $game, $query, $filter_min_level = null, $filter_max_level = null, $limit = 8, $filter_type_name_id = null, string $contentType = self::contentTypes['getItemsQuestSearch'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getItemsQuestSearch'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getItemsQuestSearch, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling QuestItemsApi.getItemsQuestSearch, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getItemsQuestSearch'
            );
        }

        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getItemsQuestSearch'
            );
        }

        if ($filter_min_level !== null && $filter_min_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling QuestItemsApi.getItemsQuestSearch, must be smaller than or equal to 200.');
        }
        if ($filter_min_level !== null && $filter_min_level < 0) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling QuestItemsApi.getItemsQuestSearch, must be bigger than or equal to 0.');
        }
        
        if ($filter_max_level !== null && $filter_max_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling QuestItemsApi.getItemsQuestSearch, must be smaller than or equal to 200.');
        }
        if ($filter_max_level !== null && $filter_max_level < 0) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling QuestItemsApi.getItemsQuestSearch, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling QuestItemsApi.getItemsQuestSearch, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling QuestItemsApi.getItemsQuestSearch, must be bigger than or equal to 1.');
        }
        
        

        $resourcePath = '/{game}/v1/{language}/items/quest/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_min_level,
            'filter[min_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_max_level,
            'filter[max_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_name_id,
            'filter[type.name_id]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
