<?php
/**
 * ConsumablesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * dofusdude
 *
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - 🥷 **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ⚡ **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in 🇩🇪.  - 📨 **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - 🩸 **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - 🗣️ **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - 🧠 **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - 🕵️ **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - 🖼️ **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).
 *
 * The version of the OpenAPI document: 0.8.3
 * Contact: stelzo@steado.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConsumablesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConsumablesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAllItemsConsumablesList' => [
            'application/json',
        ],
        'getItemsConsumablesList' => [
            'application/json',
        ],
        'getItemsConsumablesSearch' => [
            'application/json',
        ],
        'getItemsConsumablesSingle' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllItemsConsumablesList
     *
     * List All Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ItemsListPaged
     */
    public function getAllItemsConsumablesList($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, string $contentType = self::contentTypes['getAllItemsConsumablesList'][0])
    {
        list($response) = $this->getAllItemsConsumablesListWithHttpInfo($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $accept_encoding, $contentType);
        return $response;
    }

    /**
     * Operation getAllItemsConsumablesListWithHttpInfo
     *
     * List All Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ItemsListPaged, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllItemsConsumablesListWithHttpInfo($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, string $contentType = self::contentTypes['getAllItemsConsumablesList'][0])
    {
        $request = $this->getAllItemsConsumablesListRequest($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $accept_encoding, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ItemsListPaged' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ItemsListPaged' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ItemsListPaged', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ItemsListPaged';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ItemsListPaged',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllItemsConsumablesListAsync
     *
     * List All Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllItemsConsumablesListAsync($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, string $contentType = self::contentTypes['getAllItemsConsumablesList'][0])
    {
        return $this->getAllItemsConsumablesListAsyncWithHttpInfo($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $accept_encoding, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllItemsConsumablesListAsyncWithHttpInfo
     *
     * List All Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllItemsConsumablesListAsyncWithHttpInfo($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, string $contentType = self::contentTypes['getAllItemsConsumablesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ItemsListPaged';
        $request = $this->getAllItemsConsumablesListRequest($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $accept_encoding, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllItemsConsumablesList'
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  string $accept_encoding optional compression for saving bandwidth (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllItemsConsumablesListRequest($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $accept_encoding = null, string $contentType = self::contentTypes['getAllItemsConsumablesList'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getAllItemsConsumablesList'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getAllItemsConsumablesList, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getAllItemsConsumablesList, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getAllItemsConsumablesList'
            );
        }







        $resourcePath = '/{game}/{language}/items/consumables/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_level,
            'sort[level]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_name,
            'filter[type_name]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_min_level,
            'filter[min_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_max_level,
            'filter[max_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }

        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsConsumablesList
     *
     * List Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ItemsListPaged
     */
    public function getItemsConsumablesList($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, string $contentType = self::contentTypes['getItemsConsumablesList'][0])
    {
        list($response) = $this->getItemsConsumablesListWithHttpInfo($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $contentType);
        return $response;
    }

    /**
     * Operation getItemsConsumablesListWithHttpInfo
     *
     * List Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ItemsListPaged, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsConsumablesListWithHttpInfo($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, string $contentType = self::contentTypes['getItemsConsumablesList'][0])
    {
        $request = $this->getItemsConsumablesListRequest($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ItemsListPaged' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ItemsListPaged' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ItemsListPaged', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ItemsListPaged';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ItemsListPaged',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsConsumablesListAsync
     *
     * List Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsConsumablesListAsync($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, string $contentType = self::contentTypes['getItemsConsumablesList'][0])
    {
        return $this->getItemsConsumablesListAsyncWithHttpInfo($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsConsumablesListAsyncWithHttpInfo
     *
     * List Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsConsumablesListAsyncWithHttpInfo($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, string $contentType = self::contentTypes['getItemsConsumablesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ItemsListPaged';
        $request = $this->getItemsConsumablesListRequest($language, $game, $sort_level, $filter_type_name, $filter_min_level, $filter_max_level, $page_size, $page_number, $fields_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsConsumablesList'
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $sort_level sort the resulting list by level, default unsorted (optional)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $page_size size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param  int $page_number page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param  string[] $fields_item adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsConsumablesListRequest($language, $game, $sort_level = null, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $page_size = null, $page_number = null, $fields_item = null, string $contentType = self::contentTypes['getItemsConsumablesList'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getItemsConsumablesList'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getItemsConsumablesList, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getItemsConsumablesList, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getItemsConsumablesList'
            );
        }





        if ($page_size !== null && $page_size < -1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling ConsumablesApi.getItemsConsumablesList, must be bigger than or equal to -1.');
        }
        
        if ($page_number !== null && $page_number < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_number" when calling ConsumablesApi.getItemsConsumablesList, must be bigger than or equal to 0.');
        }
        
        

        $resourcePath = '/{game}/{language}/items/consumables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_level,
            'sort[level]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_name,
            'filter[type_name]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_min_level,
            'filter[min_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_max_level,
            'filter[max_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page[size]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'page[number]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_item,
            'fields[item]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsConsumablesSearch
     *
     * Search Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game game (required)
     * @param  string $query case sensitive search query (required)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ItemListEntry[]
     */
    public function getItemsConsumablesSearch($language, $game, $query, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $limit = 8, string $contentType = self::contentTypes['getItemsConsumablesSearch'][0])
    {
        list($response) = $this->getItemsConsumablesSearchWithHttpInfo($language, $game, $query, $filter_type_name, $filter_min_level, $filter_max_level, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getItemsConsumablesSearchWithHttpInfo
     *
     * Search Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $query case sensitive search query (required)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ItemListEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsConsumablesSearchWithHttpInfo($language, $game, $query, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $limit = 8, string $contentType = self::contentTypes['getItemsConsumablesSearch'][0])
    {
        $request = $this->getItemsConsumablesSearchRequest($language, $game, $query, $filter_type_name, $filter_min_level, $filter_max_level, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ItemListEntry[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ItemListEntry[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ItemListEntry[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ItemListEntry[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ItemListEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsConsumablesSearchAsync
     *
     * Search Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $query case sensitive search query (required)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsConsumablesSearchAsync($language, $game, $query, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $limit = 8, string $contentType = self::contentTypes['getItemsConsumablesSearch'][0])
    {
        return $this->getItemsConsumablesSearchAsyncWithHttpInfo($language, $game, $query, $filter_type_name, $filter_min_level, $filter_max_level, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsConsumablesSearchAsyncWithHttpInfo
     *
     * Search Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $query case sensitive search query (required)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsConsumablesSearchAsyncWithHttpInfo($language, $game, $query, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $limit = 8, string $contentType = self::contentTypes['getItemsConsumablesSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ItemListEntry[]';
        $request = $this->getItemsConsumablesSearchRequest($language, $game, $query, $filter_type_name, $filter_min_level, $filter_max_level, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsConsumablesSearch'
     *
     * @param  string $language a valid language code (required)
     * @param  string $game (required)
     * @param  string $query case sensitive search query (required)
     * @param  string $filter_type_name only results with the translated type name (optional)
     * @param  int $filter_min_level only results which level is equal or above this value (optional)
     * @param  int $filter_max_level only results which level is equal or below this value (optional)
     * @param  int $limit maximum number of returned results (optional, default to 8)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsConsumablesSearchRequest($language, $game, $query, $filter_type_name = null, $filter_min_level = null, $filter_max_level = null, $limit = 8, string $contentType = self::contentTypes['getItemsConsumablesSearch'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getItemsConsumablesSearch'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getItemsConsumablesSearch, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getItemsConsumablesSearch, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getItemsConsumablesSearch'
            );
        }

        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getItemsConsumablesSearch'
            );
        }


        if ($filter_min_level !== null && $filter_min_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling ConsumablesApi.getItemsConsumablesSearch, must be smaller than or equal to 200.');
        }
        if ($filter_min_level !== null && $filter_min_level < 1) {
            throw new \InvalidArgumentException('invalid value for "$filter_min_level" when calling ConsumablesApi.getItemsConsumablesSearch, must be bigger than or equal to 1.');
        }
        
        if ($filter_max_level !== null && $filter_max_level > 200) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling ConsumablesApi.getItemsConsumablesSearch, must be smaller than or equal to 200.');
        }
        if ($filter_max_level !== null && $filter_max_level < 1) {
            throw new \InvalidArgumentException('invalid value for "$filter_max_level" when calling ConsumablesApi.getItemsConsumablesSearch, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ConsumablesApi.getItemsConsumablesSearch, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ConsumablesApi.getItemsConsumablesSearch, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/{game}/{language}/items/consumables/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_name,
            'filter[type_name]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_min_level,
            'filter[min_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_max_level,
            'filter[max_level]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsConsumablesSingle
     *
     * Single Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game game (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSingle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Resource
     */
    public function getItemsConsumablesSingle($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemsConsumablesSingle'][0])
    {
        list($response) = $this->getItemsConsumablesSingleWithHttpInfo($language, $ankama_id, $game, $contentType);
        return $response;
    }

    /**
     * Operation getItemsConsumablesSingleWithHttpInfo
     *
     * Single Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSingle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Resource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsConsumablesSingleWithHttpInfo($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemsConsumablesSingle'][0])
    {
        $request = $this->getItemsConsumablesSingleRequest($language, $ankama_id, $game, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Resource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Resource' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Resource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Resource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Resource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsConsumablesSingleAsync
     *
     * Single Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSingle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsConsumablesSingleAsync($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemsConsumablesSingle'][0])
    {
        return $this->getItemsConsumablesSingleAsyncWithHttpInfo($language, $ankama_id, $game, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsConsumablesSingleAsyncWithHttpInfo
     *
     * Single Consumables
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSingle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsConsumablesSingleAsyncWithHttpInfo($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemsConsumablesSingle'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Resource';
        $request = $this->getItemsConsumablesSingleRequest($language, $ankama_id, $game, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsConsumablesSingle'
     *
     * @param  string $language a valid language code (required)
     * @param  int $ankama_id identifier (required)
     * @param  string $game (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemsConsumablesSingle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsConsumablesSingleRequest($language, $ankama_id, $game, string $contentType = self::contentTypes['getItemsConsumablesSingle'][0])
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling getItemsConsumablesSingle'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getItemsConsumablesSingle, must be smaller than or equal to 2.');
        }
        if (strlen($language) < 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling ConsumablesApi.getItemsConsumablesSingle, must be bigger than or equal to 2.');
        }
        
        // verify the required parameter 'ankama_id' is set
        if ($ankama_id === null || (is_array($ankama_id) && count($ankama_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ankama_id when calling getItemsConsumablesSingle'
            );
        }

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling getItemsConsumablesSingle'
            );
        }


        $resourcePath = '/{game}/{language}/items/consumables/{ankama_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($ankama_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ankama_id' . '}',
                ObjectSerializer::toPathValue($ankama_id),
                $resourcePath
            );
        }
        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
